package com.itwillbs.test2.controller;

import javax.servlet.http.HttpServletRequest;

import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

@Controller
public class TestController {
	
	// "/main" URL 요청 시 /WEB-INF/views/main.jsp 페이지 포워딩(GET 방식)
//	@RequestMapping(value = "/main", method = RequestMethod.GET)
//	public String main() {
//		System.out.println("main() 메서드");
//		return "main";
//	}
	
	// "/main" URL 요청 시 /WEB-INF/views/main.jsp 페이지 포워딩(GET 방식)
	// => URL 파라미터에 데이터 전송 시 메서드 파라미터의 변수명과 URL 파라미터명이 일치하면
	//    자동으로 해당 파라미터 값을 가져와서 파라미터 변수에 저장
	// ex) http://localhost:8080/test2/main?id=admin&name=홍길동
	@RequestMapping(value = "/main", method = RequestMethod.GET)
	public String main(String id, String name) { // id 와 name 파라미터값 자동으로 저장됨
		System.out.println("main(String) 메서드");
		System.out.println("아이디 = " + id + ", 이름 = " + name);
		return "main";
	}
	
	// ------------------------------------------------------------
//	@RequestMapping(value = "/push", method = RequestMethod.GET)
//	public String push() { 
//		return "push_data";
//	}
	
	// "/push" 서블릿 주소 요청 시 HttpServletRequest 객체를 자동으로 전달받기(= 자동 주입)
	// => 호출될 메서드 정의 시 메서드 파라미터로 HttpServletRequest 타입 변수 선언
//	@RequestMapping(value = "/push", method = RequestMethod.GET)
//	public String push(HttpServletRequest request) { 
//		// HttpServletRequest 객체의 setAttribute() 메서드를 호출하여 객체(데이터) 저장 가능
//		// => "msg" 라는 속성명으로 "Hello, World!" 문자열 저장
//		request.setAttribute("msg", "Hello, World!");
//		
//		// request 객체는 Dispatcher 방식으로 포워딩 시 그대로 유지됨(저장 데이터도 유지됨)
//		return "push_data"; // "/WEB-INF/views/push_data.jsp" 페이지로 포워딩(Dispatcher 방식)
//	}
	
	// HttpServletRequest 객체 대신 org.springframework.ui.Model 타입을 파라미터로 지정 시
	// 데이터 저장이 가능한 스프링 전용 데이터 공유 객체를 자동으로 주입받을 수 있음
	// => request 객체와 성격이 거의 유사하며, java.util.Map 객체를 기반으로 생성한
	//    스프링에서 제공하는 데이터 공유 객체
	@RequestMapping(value = "/push", method = RequestMethod.GET)
	public String push(Model model) {
		// request.setAttribute() 메서드와 마찬가지로 Model 객체의 addAttribute() 로 데이터 저장
		// request 객체와 범위(Scope) 동일
		// 단, Model 객체와 HttpServletRequest 객체 동시 사용 불가
		// (일반적인 데이터 저장 시 request 객체보다 더 많이 사용됨)
		model.addAttribute("msg", "Hello, World! - Model 객체");
		
		return "push_data"; // "/WEB-INF/views/push_data.jsp" 페이지로 포워딩(Dispatcher 방식)
	}
	
	// ----------------------------------------------------------------------------
	@RequestMapping(value = "/redirect", method = RequestMethod.GET)
	public String redirect() {
//		return "redirect"; // "/WEB-INF/views/redirect.jsp" 페이지로 포워딩(Dispatcher 방식)
		
		// 리다이렉트 방식 포워딩 시 return "redirect:/포워딩 할 주소" 형식으로 지정
		// ex) return "redirect:/dispatcher"; // 주소표시줄의 요청 주소가 dispatcher 로 변경됨
//		return "redirect:/dispatcher";
		
		// 리다이렉트 방식 포워딩 테스트를 위한 URL 파라미터 전달
		String name = "hong";
		int age = 20;
		return "redirect:/dispatcher?name=" + name + "&age=" + age;
		
	}
	
//	// 리다이렉트 방식 요청 처리 수행을 위해 디스패쳐 방식을 사용한 redirect.jsp 페이지 포워딩
//	@RequestMapping(value = "/dispatcher", method = RequestMethod.GET)
//	public String dispatcher() {
//		return "redirect"; // "/WEB-INF/views/redirect.jsp" 페이지로 포워딩(Dispatcher 방식)
//		// => URL 에 표시된 주소 : http://localhost:8080/test2/dispatcher(이전 요청 주소)
//	}
	
	// 리다이렉트 방식 요청에서 전달받은 URL 파라미터를 가져오기 위해
	// dispatcher() 메서드 정의 시 파라미터로 동일한 이름의 변수 선언 필요
	@RequestMapping(value = "/dispatcher", method = RequestMethod.GET)
	public String dispatcher(String name, String age) {
		System.out.println("이름 : " + name);
		System.out.println("나이 : " + age);
		
		return "redirect"; // "/WEB-INF/views/redirect.jsp" 페이지로 포워딩(Dispatcher 방식)
	}
	
}















