<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<!-- mapper 태그 namespace 속성에 BoardMapper 인터페이스 지정 -->
<mapper namespace="com.itwillbs.mvc_board.mapper.BoardMapper">
	<!-- 1. 최대 글번호 조회 -->
	<!-- 주의! MAX() 함수 사용 시 NULL 값이 올 수도 있으므로 int 대신 Integer 클래스 리턴 필요! -->
	<select id="selectMaxBoardNum" resultType="java.lang.Integer">
		SELECT MAX(board_num) FROM board
	</select>
	
	<!-- 2. 글 쓰기 & 답글 쓰기 -->
	<insert id="insertBoard">
		INSERT INTO board
		VALUES (
			#{board_num}, #{board_name}, #{board_pass}, #{board_subject}, #{board_content},
			#{board_file}, #{board_real_file}, #{board_re_ref}, #{board_re_lev}, #{board_re_seq},
			#{board_readcount}, now()
		)
	</insert>
	
	<!-- 3. 글 목록 갯수 조회 -->
	<!-- COUNT() 함수 실행 결과는 최소 0 이므로 null 값이 없기 때문에 int 타입 사용 가능함 -->
<!-- 	<select id="selectBoardListCount" resultType="int"> -->
<!-- 		SELECT COUNT(*) FROM board -->
<!-- 	</select> -->

	<!-- 3. 글 목록 갯수 조회(검색 기능 추가) -->
	<!-- 
	JSTL 과 유사하게 if 태그 또는 choose, when, otherwise 태그를 조합하여 조건문으로 SQL 실행 가능
	= 동적 쿼리
	-->
	<select id="selectBoardListCount" resultType="int">
		SELECT COUNT(*) FROM board
		<!-- choose 태그를 사용하여 if~else 또는 다중 if~else if 문 구조 구현 가능 -->
		<!-- 1. keyword 가 널스트링("") 이거나, keyword 가 널스트링("") 이 아니고 "subject" 일 경우 -->
		<!-- 2. keyword 가 널스트링("") 이 아니고, "content" 일 경우 -->
		<!-- 3. keyword 가 널스트링("") 이 아니고, "name" 일 경우 -->
		<choose>
			<when test="keyword.equals('') or !keyword.equals('') and searchType.equals('subject')">
				WHERE board_subject LIKE #{keyword}
			</when>
			<when test="!keyword.equals('') and searchType.equals('content')">
				WHERE board_content LIKE #{keyword}
			</when>
			<when test="!keyword.equals('') and searchType.equals('name')">
				WHERE board_name LIKE #{keyword}
			</when>
		</choose>
	</select>
	
	<!-- 4. 글 목록 조회 -->
	<select id="selectBoardList" resultType="com.itwillbs.mvc_board.vo.BoardVO">
		SELECT * FROM board
		<choose>
			<when test="keyword.equals('') or !keyword.equals('') and searchType.equals('subject')">
				WHERE board_subject LIKE #{keyword}
			</when>
			<when test="!keyword.equals('') and searchType.equals('content')">
				WHERE board_content LIKE #{keyword}
			</when>
			<when test="!keyword.equals('') and searchType.equals('name')">
				WHERE board_name LIKE #{keyword}
			</when>
		</choose>
		<!-- 공통 작업으로 수행할 정렬(LIMIT 절에 사용될 데이터는 pageInfo 객체 사용 -->
		ORDER BY board_re_ref DESC, board_re_seq ASC
		LIMIT #{pageInfo.startRow}, #{pageInfo.listLimit}
	</select>
	
	<!-- 5. 글 조회수 증가 -->
	<update id="updateReadcount">
		UPDATE board
		SET board_readcount = board_readcount + 1
		WHERE board_num = #{board_num}
	</update>
	
	<!-- 6. 글 상세정보 조회 -->
	<select id="selectBoardDetail" resultType="com.itwillbs.mvc_board.vo.BoardVO">
		SELECT * FROM board
		WHERE board_num = #{board_num}
	</select>
	
	<!-- 7. 글 삭제 -->
	<!-- 글번호와 패스워드가 일치하는 레코드 삭제 -->
	<delete id="deleteBoard">
		DELETE FROM board
		WHERE board_num = #{board_num} AND board_pass = #{board_pass}
	</delete>
	
	<!-- 8. 글 수정 -->
	<!-- 글번호와 패스워드가 일치하는 레코드의 작성자, 제목, 내용 수정 -->
	<update id="updateBoard">
		UPDATE board
		SET board_name = #{board_name}, board_subject = #{board_subject}, board_content = #{board_content}
		WHERE board_num = #{board_num} AND board_pass = #{board_pass}
	</update>
	
	<!-- 9. 기존 답글 순서번호 조정 -->
	<!-- 원본글과 참조글번호(board_re_ref)가 같고, 순서번호가 원본보다 큰 게시물들의 순서번호 + 1 -->
	<update id="updateBoardReSeq">
		UPDATE board 
		SET board_re_seq = board_re_seq + 1 
		WHERE board_re_ref = #{board_re_ref} AND board_re_seq > #{board_re_seq}
	</update>
</mapper>












