[ 암호화(Encrypt) vs 해시(Hash) ]
1. 암호화(Encrypt, Encryption)
- 평문(Clear Text, Plain Text)을 암호문으로 변환하는 과정
- 반드시 복호화(암호문 -> 평문) 가능
- 대칭 암호화(DES, AES 등), 비대칭 암호화(RSA 등) 로 분류됨

2. 해시(해싱, Hash)
- 가변길이 데이터를 고정길이 문자열로 변환
- 평문을 해시값을 사용하여 변형시킴
- 복호화가 불가능하므로 원문을 알 수 없음
  => 단방향 암호화라고도 함
- MD5(Message Digest), SHA(Secure Hash Algorithm) 등

===============================================================
< 스프링 시큐리티를 활용한 단방향 암호화(해싱) >
- org.springframework.security.BCryptPasswordEncoder 클래스 활용

[ BCryptPasswordEncoder 클래스를 활용하여 해싱하는 방법 ]
1. pom.xml 에 Spring-security-web 라이브러리 추가 필요

<!-- https://mvnrepository.com/artifact/org.springframework.security/spring-security-web -->
<dependency>
    <groupId>org.springframework.security</groupId>
    <artifactId>spring-security-web</artifactId>
    <version>5.7.3</version>
</dependency>


2. org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder 클래스 사용하여 해싱
// BCryptPasswordEncoder 객체 생성
BCryptPasswordEncoder encoder = new BCryptPasswordEncoder();

// encode() 메서드 호출하여 해싱(리턴값으로 암호화 된 암호문 리턴)
String securePasswd = encoder.encode(평문암호);
// => DB 에 암호문으로 된 패스워드 저장


3. org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder 사용하여 비교
// BCryptPasswordEncoder 객체 생성
BCryptPasswordEncoder encoder = new BCryptPasswordEncoder();

// matches() 메서드 호출하여 비교
if(encoder.matches(평문암호, 해싱암호)) {

} else {

}












