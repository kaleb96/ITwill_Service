영역(Scope) 객체
- 내장 객체 중 각기 다른 영역(Scope)을 갖는 4대 영역 객체(page, request, session, application)
- 각 영역 객체에 저장되는 데이터를 속성(attribute)이라고 함
  (속성은 이름과 값으로 이루어짐)
- 각 영역 객체의 속성에 접근하는 메서드 : setAttribute(), getAttribute()
	
1. page 객체
   - 현재 페이지 정보를 저장하고 관리하는 객체
   - JSP 에서는 다른 page 변수가 존재하므로 pageContext 이름으로 객체를 관리
   - page 객체에 저장되는 속성은 현재 페이지 내에서만 접근 가능
     => 현재 페이지를 벗어나면(= 페이지 변경 시) 새로운 page 객체가 생성되므로
        현재 페이지 정보는 제거되고, 새로운 페이지 정보가 저장됨

2. request 객체(매우 중요!)
   - 현재 요청(request) 정보를 저장하고 관리하는 객체
   - 현재 요청이 발생한 시점부터 응답(response) 페이지까지는 접근 가능
     ex) "a.jsp" 페이지의 form 태그에서 "b.jsp" 페이지로 요청이 발생할 경우
         새로운 request 객체에 요청 정보가 저장되고 "b.jsp" 페이지까지 request 객체가 유지됨
         즉, "b.jsp" 페이지에서는 "a.jsp" 페이지에서 입력한 데이터에 접근 가능함
         => 단, "b.jsp" 페이지에서 새로운 요청이 발생하면 기존 request 객체가 제거되므로
            기존에 저장되어 있던 요청 정보가 사라지고, 새로운 request 객체가 생성됨
            (새로운 요청? response.sendRedirect(), 하이퍼링크, 자바스크립트로 이동)
    - 주의사항!
      <form> 태그 또는 URL 을 통해 전달된 파라미터값은 request.getParameter() 메서드로 가져오고,
      request.setAttribute() 메서드로 저장한 속성은 request.getAttribute() 메서드로 가져온다!

3. session 객체(중요!)
   - 서버와 클라이언트 사이의 연결 정보에 대한 관리 역할을 수행하는 객체
   (= 가상의 연결(Virtual Connection) 개념을 사용)
   - 웹 페이지와 관계없이 어떠한 정보를 유지하는 용도로 사용
     ex) 로그인 후 아이디 정보를 기억하여 페이지 이동시에도 로그인 상태가 계속 유지되도록 함
     (=> request 객체는 요청페이지에서 응답페이지까지만 정보가 유지됨)
   - 서버에 접속(연결) 시 기본적으로 해당 클라이언트에 해당하는 기억 장소(= 세션)가 생성되고
     자동으로 아이디(세션ID) 값이 부여됨
     => 주의! 로그인 할 때 사용하는 아이디가 아님(세션ID 는 사용자가 결정하지 못함)
   - 세션 유지 또는 제거 조건
     1) 세션 유지 시간(타이머 = maxInactiveInterval) 값만큼 세션 정보가 유지됨
        따라서, 유지 시간 동안 아무런 동작이 없을 경우 유지 시간이 만료될 때 세션 정보 자동 제거
        => 참고) 기본 세션 유지 시간(maxInactiveInterval) 값은 1800(초) = 30분
        => 참고) 서버와 통신을 수행하면 세션 유지 시간이 다시 초기화됨(처음부터 다시 카운팅)
     2) 세션 유지 시간과 관계없이 invalidate() 메서드 호출 시 세션 초기화
     3) 웹브라우저가 종료되면 세션 초기화
   ex) 로그인 시 세션에 아이디를 저장하고, 로그아웃 수행 시 세션에 저장된 아이디 제거
   ex) 쇼핑몰에서 비회원 상태에서 장바구니에 상품을 담고, 웹브라우저 종료 시 장바구니 값을 제거

4. application 객체
   - 웹 어플리케이션 서버(WAS = 웹컨테이너 = 톰캣)에 대한 정보를 관리하는 객체
   - 서버 당 하나의 application 객체가 생성됨
     => 어플리케이션 전체 영역에서 하나의 객체를 공유함
   - 서버가 시작되면 application 객체가 생성되고, 서버가 중지되면 application 객체가 제거됨
   ex) 웹 사이트 접속자 수 카운팅 등

===================================================================
< 영역 객체의 공통 메서드 >
1. setAttribute(String key, Object value)
   - key 에 해당하는 이름으로 value 에 해당하는 데이터를 저장(= 매핑)
   - key 에 해당하는 이름은 객체의 속성값(데이터)를 구분하는 용도로 사용되며
     중복되는 key 가 지정될 경우, 기존의 데이터를 덮어쓰게 됨
     => 하나의 key 에 매핑되는 데이터는 동시에 하나만 가능
   - Object 타입으로 전달되는 value(데이터)는 모든 타입 전달 가능(= 만능 타입)
   ex) 사물함의 특정 번호를 key 로 사용하여 물건(value)을 저장하는 것

2. Object getAttribute(String key)
   - key 에 해당하는 value 값(= 데이터)을 리턴
   - 리턴타입이 Object 타입(어떤 데이터든 모두 Object 타입으로 리턴됨)
     => 따라서, 상황에 따라 형변환 연산자 등을 통해 데이터에 대한 변환 과정이 필요할 수 있다!
        ex) String 타입 변수에 저장해야할 경우 (String) 형변환 연산자 필요
   ex) 사물함 번호를 key 로 사용하여 사물함 내에 저장된 물건(value)을 가져오는 것

3. removeAttribute(String key)
   - key 값으로 등록되어 있는 key 와 value 를 모두 제거






