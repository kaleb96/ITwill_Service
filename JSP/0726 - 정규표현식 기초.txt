[ 정규표현식(Regular Expression, Regex) ]
- 문자열을 처리하기 위한 패턴 기반의 문자열(또는 식)
- 정규표현식을 패턴을 통해 처리할 문자열을 지정하고, 특정 객체를 활용하여 
  정규표현식의 규칙에 해당(부합)하는지 여부 체크
  ex) 패스워드 복잡도 검사, 회원 가입 시 전화번호 또는 이메일 등의 양식 체크 등
      (= 유효성 검사 = Validation check 라고 함)
- 프로그램 개발 뿐만 아니라 네트워크, 웹 등에서 공용으로 사용 가능한 표준 표현식
  (프로그래밍 언어도 자바 뿐만 아니라 자바스크립트 등 다양한 언어에서 활용 가능)
==================================================================================
< 정규표현식에 사용되는 패턴 문자 - 메타 문자(Meta character) >
=> x 또는 y 라는 임의의 문자열을 기준으로 해당 문자열 앞 뒤에 기호를 붙여 패턴 정의

< 일반적인 기호 >
1. ^x : x 로 시작하는 문자열
   ex) "x", "xa", "xxx", "xyz" 등... => 패턴과 일치하는(= 부합하는) 문자열 = 사용 가능
       "y", "ya", "yyy", "yzx" 등... => 패턴과 일치하지 않는 문자열 = 사용 불가능
   ex2) x 가 숫자를 의미할 때 : "숫자admin"(O), "숫자123"(O), "admin숫자"(X)

2. x$ : x 로 끝나는 문자열
   ex) "x", "ax", "xxx", "zyx" 등... => 사용 가능
       "y", "xy", "xxy", "xyz" 등... => 사용 불가능
----------------------------------------------------------------
x 로 시작해서 x 로 끝나는 문자열(= x만 존재해야하는 경우)
=> ^x$ : "x"(O), "xy"(X), "ax"(X), "x1"(X)

맨 앞에 x 뒤에 y 로 끝나는 문자열(= xy 만 존재해야하는 경우)
=> ^xy$
----------------------------------------------------------------
3. .x : x 앞에 1개의 문자가 포함되는 문자열
   ex) "ax", "bx", "abxy" => 사용 가능(어떤 위치든 x라는 문자 앞에 한 글자 존재)
       "xa", "xyz" => 사용 불가능

4. x+ : x 가 한 번 이상 반복되는 문자열(최소 한 번)
   ex) "x", "xx", "xxxxx" 등...

5. x* : x 가 0번 이상 반복되는 문자열(없을 수도 있음)
   ex) "", "a", "b", "x", "xxx" 등 => 단독으로 사용 시 아무 문자열이나 모두 해당
       => 따라서, 주로 다른 패턴들과 결합하여 사용

6. x? : x가 나올 수도 있고, 나오지 않을 수도 있는 문자열
   ex) "", "a", "b", "x", "xxx" 등 => 단독으로 사용 시 아무 문자열이나 모두 해당
       => 따라서, 주로 다른 패턴들과 결합하여 사용

7. x|y : x 또는 y 가 포함되는 문자열
   ex) "x", "y", "xy", "xyz" 등... => 사용 가능
----------------------------------------------------------------
예시)
1) xa?y$
=> 시작되는 문자열은 상관없으나
   문자열 내에서 x 가 있는 경우
   x 뒤의 문자로 a 가 있을 수도 있고 없을 수도 있으며,
   그 뒤에는 반드시 마지막에 y로 끝나는 문자열
   ex) "xy"(O) => x 뒤에 a 는 없지만, 그 뒤가 y 로 끝나는 문자열
       "xay"(O) => x 뒤에 a 가 있으며, 그 뒤가 y 로 끝나는 문자열
       "xzy"(X) => x 와 y 사이에 a 가 아닌 다른 문자가 있으므로 사용 불가
       "xyz"(X) => x 뒤에 y 가 있으나, 그 뒤에 다른 문자가 있으므로 사용 불가

2) ^.xy$ 
=> 반드시 1개의 문자(무엇인지 무관)로 시작하여
   그 문자 뒤에 x 가 오고 x 뒤에 y 로 끝나는 문자열
   (총 세 글자의 문자열 중 첫번째 문자는 상관없으며, 첫번째 문자 뒤에 xy 로 끝남)
---------------------------------------------------------------------------------
< 괄호 문자 >
1. (xy) : 소괄호 안의 내용(xy)이 그대로 포함되는 문자열(= 소괄호 안의 문자열 그룹화)
   ex) "xy"(O), "yx"(X)

2. 중괄호{} 는 반복 횟수 지정
2-1. x{n} : x 가 n번만큼 반복되는 문자열
   ex) x{5} : x 가 5개(5번 반복)인 문자열 => "xxxxx"(O), "xxx"(X)

2-2. x{n,} : x 가 n번 이상 반복되는 문자열
   ex) x{5,} : x 가 5번 이상 반복되는 문자열 => "xxxxx"(O), "xxxxxxxx"(O), "xxx"(X)

2-3. x{n,m} : x 가 n번 이상, m번 이하 반복되는 문자열
   ex) x{2,4} : x 가 2번 이상 4번 이하 반복되는 문자열 
       => "xxx"(O), "xxxx"(O), "xx"(O), "xxxxxxxxx"(X)

3. 대괄호[] 는 괄호 내의 구성요소를 확인하는 용도로 사용(대괄호 안의 요소들 중 하나)
3-1. [x] : x 가 포함되는 문자 1개(= "x" 를 의미함)
     [xy] : x 또는 y 가 포함되는 문자 1개(= "x", "y", "xy")
3-2. [^x] : x 가 포함되지 않는 문자 1개(^ 기호를 대괄호 안에서 사용 시 부정의 의미)
3-3. [x-y] : x 부터 y 까지 연속되는 범위의 문자 중 1개
     ex) [A-Z] : 대문자 A 부터 대문자 Z 사이의 문자 1개(= 대문자 1개)
         [a-z] : 소문자 a 부터 소문자 z 사이의 문자 1개(= 소문자 1개)
         [0-9] : 숫자 1개
         [가-힣] : 한글 1글자
     => 주로, 중괄호(반복 지정)와 조합하여 사용됨
        ex) [가-힣]{2,5} : 한글 2글자 ~ 5글자
            [A-Z]{2,8} : 영문 대문자 2 ~ 8글자
            [A-Za-z]{2,8} : 영문 대소문자 2 ~ 8글자
            [A-Za-z0~9!@#$%]{4,16} : 영문자 또는 숫자 또는 특수문자(!@#$%) 4 ~ 16글자
            => "AAAA"(O), "1111"(O), "!@#!@#!@#"(O), "admin"(O)
        ex2) 식별자 작성 규칙
            1) 첫글자 숫자 사용 불가(= 첫글자는 영문자, 특수문자 $ 또는 _, 한글 등 사용 가능)
            2) 특수문자는 $ 또는 _ 만 사용 가능
            3) 예약어(키워드) 사용 불가
            4) 공백 사용 불가
            5) 대소문자 구별
            6) 길이제한 없음
            => 1번, 2번, 4번, 6번 규칙을 적용하여 정규표현식으로 나타낸 경우
               ^[A-Za-z$_가-힣][A-Za-z0-9$_가-힣]{0,}$
---------------------------------------------------------------------------------
< 예외 문자 - 자바의 이스케이프 문자(\n) 같은 특정 기능을 수행하는 문자 >
\^ : ^ 기호를 패턴으로 인식하지 않고, 일반 문자로 인식
\d : 숫자(= [0-9] 와 동일)
\D : 숫자가 아닌 것(= [^0-9] 와 동일)
\s : 공백문자
\S : 공백이 아닌 문자
\w : 영어 단어 구성 요소(알파벳, 숫자, - 등)
\W : 영단어 구성요소가 아닌 문자
---------------------------------------------------------------------------------
[ 유용한 정규표현식 예 ]
1. 한글 이름(한글 2글자 ~ 5글자 사이) : ^[가-힣]{2,5}$
2. 휴대폰 번호 : ^(010|011)[-\s]?\d{3,4}[-\s]?\d{4}$
   1) ^(010|011) : 010 또는 011 로 시작
   2) [-\s]? : - 기호 또는 공백이 포함될 수도 있고, 포함되지 않을 수도 있음
   3) \d{3,4} : 숫자 3자리 또는 4자리
   4) \d{4}$ : 숫자 4자리로 끝
   => "01012345678"(O), "0115556666"(O), "010-12345678"(O), "010 1234 5678"(O)
      "010)1234-5678"(X), "0171113333"(X)

===================================================================================
[ 자바스크립트에서의 정규 표현식 ]
- 기본적인 정규표현식 패턴 작성 방법은 동일하나
  변수에 정규표현식 패턴 문자열 저장 시 문자열 데이터("패턴문자열")가 아닌
  정규표현식 객체 형태로 취급하기 위해 패턴문자열을 따옴표 대신 /패턴문자열/ 형식으로 작성
- 정규표현식에 대한 검사 수행하는 경우 패턴문자열.exec(검증할데이터) 형식으로 수행

< 패턴 작성 및 정규표현식 적용 기본 문법 >
var regex = /패턴문자열/;
if(regex.exec(검사할 문자열)) {
	// 패턴 일치할 경우 실행할 문장들...
}













