라이브러리(Library)
- 함수(또는 메서드) 들의 집합
- 사용해야하는 함수(또는 메서드)들을 미리 만들어서 모아놓은 곳

API(Application Programming Interface)
- 라이브러리에 접근하기 위한 규칙들을 정의한 것
- 라이브러리에서 제공하는 함수(또는 메서드)들에 접근하기 위해
  API 에 정의된 규칙에 따라 입력을 통해 결과를 전달받아 사용할 수 있도록
  해주는 것
- 라이브러리 = API (= 클래스들의 모음집)

ex) 카카오 API - 카카오에서 제공하는 기능을 활용하기 위한 클래스 모음 및 설명서
    네이버 로그인 API - 네이버의 로그인 기능을 활용하기 위한 클래스 모음 및 설명서
                     
JDBC(Java DataBase Connectivity) API
- 자바에서 데이터베이스에 접근하기 위한 드라이버 클래스 등을 묶어서
  제공하는 표준화 된 API(라이브러리)
- MySQL, Oracle 등 각 데이터베이스 제조사의 개발자가
  프로그래밍 언어를 통해 자사의 데이터베이스에 쉽게 접근할 수 있도록
  해당 데이터베이스 접근에 필요한 기능들을 드라이버 클래스 형태로 제공해준다.
  따라서, 프로그램 개발자는 데이터베이스 내부 구조를 알지 못해도
  JDBC 를 활용하여 드라이버 클래스를 사용하면 프로그래밍언-DB 연결을 수행 가능
  => 데이터베이스 접근 방법을 표준 형태로 제공해주므로
     데이터베이스가 변경되더라도 드라이버 교체 및 간단한 설정 변경을 통해
     기존 코드를 거의 수정하지 않고도 데이터베이스 교체가 가능함


[ MySQL 을 위한 JDBC 드라이버 준비 방법 ]
1. MySQL 연동을 위한 드라이버가 포함된 API(라이브러리) 다운로드
   1) https://www.mysql.com 접속 후 상단 Downloads 클릭
   2) 아래쪽 MySQL community (GPL) Downloads 링크 클릭
      (또는 https://www.mysql.com/downloads/ 접속)
   3) Connector/J 링크 클릭
   4) Archive 메뉴 클릭
   5) Operating System 항목에서 Platform Independent 선택 후
      Platform Independent (Architecture Independent), ZIP Archive 다운로드
   6) 압축 풀기

2. 압축 푼 폴더 내의 mysql-connector-java-x.x.xx.jar 파일 사용법
   1) 특정 프로젝트에서만 사용할 경우
      - 이클립스 내의 프로젝트명 - src - main - webapp - WEB-INF - lib 폴더에 복사
      - 해당 파일 우클릭 - Build Path - Add to Build Path 선택
      - 프로젝트 내의 Referenced Libraries 항목에 
        mysql-connector-java-x.x.xx.jar 파일 추가 확인

   2) 모든 프로젝트에서 해당 jar 파일을 사용할 경우
      - 이클립스에서 설정된 JRE 폴더 열기
        (Window 메뉴 - Preferences - Java - Installed JREs 메뉴에서 확인 및 설정)
      - 해당 JRE 폴더 - lib - ext 폴더 내에 mysql-connector-java-x.x.xx.jar 파일 복사
      - 이클립스 재시작 후 프로젝트 내의 JRE System Libraries 항목에
        mysql-connector-java-x.x.xx.jar 파일 추가 확인
======================================================================================

[ JDBC 를 활용한 MySQL 연동(사용) 방법 - 4단계 ]
[ 1단계. JDBC 드라이버 로드 ]
   - java.lang 패키지의 Class 클래스의 static 메서드 forName() 호출하여 
     드라이버 클래스가 위치한 패키지명과 클래스명을 문자열로 전달
   - com.mysql.jdbc 패키지 내의 Driver.class 파일을 지정해야함
     => "com.mysql.jdbc.Driver" 형식으로 지정(주의! .class 생략)

   < 문법 >
   Class.forName("드라이버클래스");
   ex) Class.forName("com.mysql.jdbc.Driver");
   => 주의! 드라이버 클래스 위치 또는 파일명이 틀렸을 경우(= 파일이 없을 경우) 오류 발생
      java.lang.ClassNotFoundException: com.mysql.jdbc.Drive
      => com.mysql.jdbc.Drive 클래스를 찾지 못해서 발생한 오류라는 의미


[ 2단계. DB 연결(접속) ]
  - java.sql 패키지의 DriverManager 클래스의 static 메서드인 getConnection() 호출
  - 파라미터로 DB접속 URL, 계정명, 패스워드를 전달(문자열)
  - DB 접속 시도 후 연결(접속)이 성공하면 java.sql.Connection 타입 객체 리턴
  
  < URL 형식 >
  "jdbc:mysql://접속할주소:포트번호/DB명"
  ex) "jdbc:mysql://localhost:3306/study_jsp3"

  < 문법 >
  DriverManager.getConnection("URL", "계정명", "패스워드");
  => 주의! 반드시 DriverManager 클래스는 자동 완성을 통해
     java.sql 패키지가 import 될 수 있도록 해야함
     (<%@page import="java.sql.DriverManager"%>)


[ 3단계. SQL 구문 작성 및 전달 ]
  - 현재 1단계, 2단계 과정을 통해 DB에 접속된 상태에서
    접속 정보를 담고 있는 Connection 객체를 통해 데이터베이스 관련 작업 수행 가능
    (반드시 2단계 과정에서 Connection 타입 변수에 객체를 리턴받아 저장되어 있어야함)
  - Connection 객체에 prepareStatement() 메서드를 호출하여 실행할 SQL 구문 전달
  - SQL 구문을 관리하는 java.sql.PreparedStatement 타입 객체 리턴됨
  - 단, 아직 구문 실행하는 단계는 아니다! (= 실행 준비 단계)

  < 문법 >
  PreparedStatement pstmt = con.prepareStatement("SQL구문");

[ 3단계 추가. SQL 구문 작성 시 전달할 데이터에 대한 파라미터 처리 ]
  1) SQL 구문 작성 시 데이터를 직접 구문 내에서 명시하거나 변수를 통해 결합을 하지 않고
     구문의 데이터 부분에 만능문자 파라미터(?)를 표시
     ex) "INSERT INTO test VALUES (" + idx + ")" 또는 "INSERT INTO test VALUES (3)"
         위의 구문 대신 idx 변수 또는 3 값이 위치할 곳을 ? 기호로 처리
         => "INSERT INTO test VALUES (?)
     ex) "INSERT INTO test3 VALUES (1,'홍길동')"
         => "INSERT INTO test3 VALUES (?,?);
  2) Connection 객체에 prepareStatement() 메서드를 호출하여 실행할 SQL 구문 전달
  3) PreparedStatement 객체의 setXXX() 메서드를 호출하여 만능문자 파라미터부분의 데이터 교체(치환)
     - setXXX() 메서드의 XXX 은 교체할 데이터의 자바 데이터타입 이름을 명시
       ex) 정수 데이터를 교체할 경우 메서드명 : setInt(), 문자열 교체 시 : setString()
     - setXXX() 메서드 파라미터
       => 첫번째 파라미터 : 만능문자(?) 의 순서번호
       => 두번째 파라미터 : 교체할 데이터
       ex) setXXX(1, 10) : 첫번째 만능문자(?)의 데이터를 10 으로 교체(설정)
 

[ 4단계. SQL 구문 실행 및 결과 처리 ]
  - 3단계에서 리턴받은 PreparedStatemenet 객체의 
    executeXXX() 메서드를 호출하여 전달받은 SQL 구문 실행
    1) executeUpdate() - DB 에 조작을 가하는 쿼리문을 실행하는 용도의 메서드
                         => 주로, DML 중 INSERT, UPDATE, DELETE 와
                            DDL 중 CREATE, ALTER, DROP 등 실행하는 용도
                         => 작업 실행 후 결과값이 int 타입으로 리턴되는데
                            이는, 영향을 받은 레코드 수가 리턴됨(DML 한정, 나머지는 0)
    2) executeQuery() - DB 에 조작을 가하지 않는 쿼리문(SELECT)을 실행하는 용도의 메서드
                        => 작업 실행 후 조회된 결과 테이블을 
                           java.sql.ResultSet 타입 객체로 리턴함




