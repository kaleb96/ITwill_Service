[ MVC_Board 프로젝트 비즈니스 로직 처리 과정 ]

--------------------------- 요청 방향 ------------------------->
서블릿 요청 -> FrontController -> Action 클래스 -> Service 클래스 -> DAO 클래스
<-------------------------- 응답 방향 --------------------------

< 글쓰기 동작 흐름 >
1. 서블릿 주소 "/BoardWriteForm.bo" 입력 시
   BoardFrontController 에 의해 "/board/qna_board_write.jsp" 페이지로 이동
   (Dispatcher 방식으로 포워딩 = /BoardWriteForm.bo 주소가 유지됨)
2. qna_board_write.jsp 페이지에서 글쓰기 폼 출력 후 내용 입력받은 후 
   글쓰기 버튼 클릭 시 글쓰기 작업 요청을 위한 서블릿 주소("BoardWritePro.bo") 요청
3. 서블릿 주소 "/BoardWritePro.bo" 입력 시 비즈니스 로직 처리를 위해
   BoardFrontController 에 의해 Action(BoardWriteProAction) 클래스의 
   인스턴스 생성 후 execute() 메서드 호출
4. BoardWriteProAction 클래스의 execute() 메서드에서 글쓰기 데이터 준비 작업 후
   비즈니스 작업 요청을 위해 BoardWriteProService 클래스의 인스턴스 생성 및 
   registBoard() 메서드 호출
5. BoardWriteProService 클래스의 registBoard() 메서드에서 
   비즈니스 로직 처리를 수행하기 위한 준비 작업 및 
   BoardDAO 클래스의 insertBoard() 메서드 호출하여 INSERT 작업 수행
6. BoardWriteProService 클래스에서 BoardDAO 의 INSERT 작업이 완료된 후 
   결과값(insertCount)을 리턴받아 판별
   => 실패 시 rollback, 성공 시 commit 작업 및 결과값(isWriteSuccess)을 true 로 변경한 후
      결과값(isWriteSuccess)을 리턴
7. BoardWriteProAction 클래스에서 BoardWriteProService 로부터 리턴된    결과값(isWriteSuccess)을 리턴받아 판별
   => 실패 시 자바스크립트를 사용하여 오류메세지 출력 및 이전페이지로 돌아가기
   => 성공 시 ActionForward 객체를 사용하여 BoardList.bo 서블릿 주소를 Redirect 방식으로 설정
8. BoardFrontController 에서 BoardWriteProAction 클래스로부터 리턴받은 
   ActionForward 객체를 판별하여 포워딩
   => "BoardList.bo" 서블릿 주소로 Redirect 방식 포워딩 수행
=========================================================================================
< 글목록 동작 흐름 >
1. 서블릿 주소 "/BoardList.bo" 입력 시 비즈니스 로직 처리를 위해
   BoardFrontController 에 의해 Action(BoardListAction) 클래스의 
   인스턴스 생성 후 execute() 메서드 호출
2. BoardListAction 클래스의 execute() 메서드에서 글목록 조회에 필요한 데이터 준비 작업 후
   비즈니스 작업 요청을 위해 BoardListService 클래스의 인스턴스 생성 및 
   getListCount(), 메서드 호출
3. BoardListService 클래스의 getListCount() 메서드에서 
   비즈니스 로직 처리를 수행하기 위한 준비 작업 및 
   BoardDAO 클래스의 selectListCount() 메서드 호출하여 게시물 총 갯수 조회 작업 수행
4. BoardListAction 클래스의 execute() 메서드에서 
   비즈니스 작업 요청을 위해 BoardListService클래스의 getBoardList() 메서드 호출
5. BoardListService 클래스의 getBoardList() 메서드에서 
   비즈니스 로직 처리를 수행하기 위한 준비 작업 및 
   BoardDAO 클래스의 selectBoardList() 메서드 호출하여 게시물 목록 조회 작업 수행
6. 조회된 게시물 목록 객체를 ArrayList<BoardDTO> 타입으로 리턴
7. BoardListAction 클래스에서 조회 결과를 리턴받아 request 객체에 저장 후
   "/board/qna_board_list.jsp" 페이지로 이동
   (Dispatcher 방식으로 포워딩 = /BoardList.bo 주소가 유지됨)
=========================================================================================
< 글 상세정보 조회 동작 흐름 >
1. 서블릿 주소 "/BoardDetail.bo" 입력 시 비즈니스 로직 처리를 위해
   BoardFrontController 에 의해 Action(BoardDetailAction) 클래스의 
   인스턴스 생성 후 execute() 메서드 호출
2. BoardDetailAction 클래스의 execute() 메서드에서 글 상세정보 조회에 필요한 
   데이터 준비 작업 후 비즈니스 작업 요청을 위해 
   BoardDetailService 클래스의 인스턴스 생성 후
   게시물 상세 정보 조회 작업을 위한 getBoard() 메서드 호출
3. BoardDetailService 객체의 getBoard() 메서드에서 
   비즈니스 로직 처리를 수행하기 위한 준비 작업 및 
   BoardDAO 클래스의 updateReadcount() 메서드 호출하여 게시물 조회수 증가 작업 수행하고
   그 후 BoardDAO 클래스의 selectBoard() 메서드 호출하여 게시물 상세 정보 조회 작업 수행하여
   BoardDTO 객체에 상세 정보 저장 후 리턴
4. BoardDetailService 객체에서 BoardDTO 객체를 리턴받아 null 일 경우 rollback,
   아니면 commit 작업 수행 후 다시 BoardDTO 객체 리턴
5. BoardDetailAction 객체에서 BoardDTO 객체 리턴받아 request 객체에 저장 후
   (게시물 상세정보(BoardDTO 객체)와 페이지번호(pageNum)를 저장)
   qna_board_view.jsp 페이지로 포워딩
   (Dispatcher 방식으로 포워딩 = /BoardDetail.bo 주소가 유지됨)
=========================================================================================
< 글 삭제 작업 동작 흐름 >
1. 서블릿 주소("/BoardDeleteForm.bo")에 대한 요청이 발생하면
   컨트롤러(BoardFrontController)에 의해 /board/qna_board_delete.jsp 페이지로 이동
   (Dispatch 방식) 
2. qna_board_delete.jsp 페이지에서 삭제를 위한 패스워드를 입력 후
   "/BoardDeletePro.bo" 서블릿 주소 요청
3. 서블릿 주소("/BoardDeletePro.bo")에 대한 요청이 발생하면
   컨트롤러(BoardFrontController)에 의해 BoardDeleteProAction 클래스의 
   인스턴스 생성 후 execute() 메서드 호출(request, response 객체를 파라미터로 전달)
4. BoardDeleteProAction 클래스의 execute() 메서드에서 
   폼 파라미터(패스워드 = board_pass) 글번호(board_num), 페이지번호(pageNum) 가져와서 저장
5. BoardDeleteProservice 클래스의 인스턴스 생성 및 isBoardWriter() 메서드를 호출하여
   글 삭제 가능 여부 판별 요청
   => 파라미터 : 글번호, 패스워드    리턴타입 : boolean(isBoardWriter)
6. BoardDeleteProservice 클래스의 isBoardWriter() 메서드에서
   BoardDAO 클래스의 isBoardWriter() 메서드를 호출하여 패스워드 확인 작업 수행 후 결과를 리턴받아 
   판별 후 다시 결과값을 BoardDeleteProAction 으로 리턴
7. BoardDeleteProAction 에서 리턴받은 결과값을 판별하여 패스워드가 일치할 경우
   BoardDeleteProService 클래스의 removeBoard() 메서드를 호출하여 글 삭제 작업 수행
   => 파라미터 : 글번호(board_num)    리턴타입 : boolean(isDeleteSuccess)
8. BoardDeleteProService 클래스에서 BoardDAO 클래스의 deleteBoard() 메서드를 호출하여
   글번호(board_num)에 해당하는 게시물 삭제 작업 수행 후 결과 리턴하고
   다시 BoardDeleteProAction 클래스로 결과 리턴
9. 삭제 결과를 판별하여 실패 시 자바스크립트도 오류 메세지 출력 및 이전페이지로 이동하고
   성공 시 ActionForward 객체를 통해 "BoardList.bo" 페이지로 포워딩
   (=> URL 에 페이지 번호를 붙여서 요청)
=========================================================================================
< 글 수정 폼 요청 작업 동작 흐름 >
1. 서블릿 주소("/BoardModifyForm.bo")에 대한 요청이 발생하면
   컨트롤러(BoardFrontController)에 의해 BoardModifyFormAction 클래스의 
   인스턴스 생성 후 execute() 메서드 호출(request, response 객체를 파라미터로 전달)
2. BoardModifyFormAction 클래스의 execute() 메서드에서 
   폼 파라미터(글번호 = board_num) 가져와서 저장 후
   BoardDetailService 클래스의 인스턴스 생성 및 getArticle() 메서드를 호출하여 전달
   => 주의! BoardModifyFormService 클래스는 생성하지 않는다! (중복이므로 불필요)
3. BoardDetailService 클래스의 getBoard() 메서드에서 게시물 조회 작업 완료 후
   리턴되는 결과값(BoardBean 객체)를 전달받아 BoardModifyFormAction 클래스로 리턴하고
   request 객체에 저장
4. ActionForward 객체를 통해 "qna_board_modify.jsp" 페이지로 포워딩 설정
   (URL 을 그대로 유지하고, request 객체를 전달하기 위해 Dispatch 방식으로 포워딩)
=======================================================================================
< 글 수정 작업 동작 흐름 >
1. 서블릿 주소("/BoardModifyPro.bo")에 대한 요청이 발생하면
   컨트롤러에 의해 BoardModifyProAction 클래스의 인스턴스 생성 후 execute() 메서드 호출
2. execute() 메서드에서 폼 파라미터(글번호, 작성자, 패스워드, 제목, 내용)를 가져와서 저장 후
   BoardModifyProService 클래스의 인스턴스 생성 및 modifyBoard() 메서드를 호출하여 전달
3. BoardModifyProService 클래스의 modifyBoard() 메서드에서 입력 데이터 중 패스워드를
   비교하기 위해 BoardDAO 클래스의 isBoardWriter() 메서드를 호출하여 패스워드 판별 수행
   (글번호와 함께 패스워드를 전달하여 비교 필요)
4. 패스워드 판별 결과가 false 이면 자바스크립트를 사용하여 '수정 권한이 없습니다' 출력 후
   이전 페이지로 돌아가기
   판별 결과가 true 이면 BoardDAO 클래스의 updateBoard() 메서드를 호출하여 게시물 수정 후
   수정 결과를 리턴받아 판별 후 commit, rollback 작업 수행 후 결과 리턴
5. BoardModifyProAction 클래스에서 수정 작업 완료 결과 판별하여
   판별 결과에 따라 자바스크립트로 '글 수정 실패' 출력 후 이전페이지로 이동 또는
   ActionForward 객체를 통해 "BoardDetail.bo" 서블릿 주소를 요청
   (Redirect 방식 포워딩 = 새 주소로 변경(새 요청)되면서 request 객체가 새로 생성됨)
   => 주의! Redirect 방식 포워딩 시 글번호(board_num)와 페이지번호(pageNum)를
      URL 뒤에 파라미터로 직접 붙여서 요청해야함


   

















