<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Insert title here</title>
<script type="text/javascript">
	/*
	리턴값이 있는 함수
	- 함수 실행 도중 return 문을 만나면 즉시 함수 실행을 종료하고 호출한 곳(위치)로 흐름이 돌아감(복귀)
	- 이 때, return 문 뒤에 어떤 값 또는 변수 등을 지정할 수도 있으며(= 리턴값)
	  값이나 변수가 지정될 경우 돌아갈 때 해당 값(= 리턴값)을 가지고 돌아감
	- 함수를 호출한 곳에서는 리턴값을 전달받아 변수에 저장하거나 연산 등에서 즉시 사용 가능
	
	< 함수 정의 기본 문법 >
	function 함수이름([매개변수선언...]) {
		// 외부로부터 함수가 호출되면 실행할 코드들...
		return [값];
	}
	*/
	
	function getMessage() {
		alert("getMessage() 함수 호출됨!");
		
		// 함수 내에서 return 문을 사용하여 호출한 곳으로 특정 값 리턴하기
		return "리턴값";
	}
	
	// getMessage() 함수 호출
	// => 함수 호출 시 getMessage() 함수로 흐름이 이동하여 함수 내의 코드를 실행하고
	//    함수 내에서 return 문을 만날 경우 return 문 뒤의 값을 가지고 원래 위치(호출한 곳)로 복귀
	// => 함수를 호출한 곳에서 해당 리턴값을 리턴받아 변수에 저장하거나 직접 사용도 가능함
// 	getMessage(); // 리턴값을 전달받지 않을 경우(사용은 가능하나 return 문을 작성한 의미가 없음)
	
	// 리턴값을 전달받아 변수에 저장하는 경우
// 	var resultValue = getMessage(); // getMessage() 함수가 리턴하는 "리턴값" 문자를 resultValue 에 저장
	// => var resultValue = "리턴값"; 코드와 결과적으로 동일한 코드가 됨
// 	alert(resultValue); // "리턴값" 문자 출력됨
	
	// 리턴값을 전달받아 변수에 저장하지 않고 직접 사용할 경우
// 	alert(getMessage()); // getMessage() 함수가 리턴하는 "리턴값" 문자를 alert() 함수로 출력
	// => alert("리턴값"); 코드와 결과적으로 동일한 코드가 됨
	// -------------------------------------------------------------------
	// 1 ~ 10 까지 정수의 합을 누적변수 total 에 누적하고, 누적된 값(55)을 리턴하는 sum() 함수 정의
	function sum() {
		let total = 0; // 합계를 누적할 변수 선언 및 초기화(덧셈의 경우 0으로 초기화)
		
		// for문을 사용하여 1 ~ 10 까지 1씩 증가 반복
		for(let i = 1; i <= 10; i++) {
			// 누적변수 total 에 현재 i값(1 ~ 10)을 누적
			total += i;
		}
		
		// 누적변수 total 값 출력
// 		alert("total = " + total);
		
		// 출력 대신 return 문을 사용하여 total 값을 리턴
		return total;
	}
	
	// sum() 함수 호출
	// => 리턴되는 정수를 전달받아 변수 resultNum 에 저장
// 	let resultNum = sum(); // let resultNum = 55; 와 동일한 코드
// 	alert("1 ~ 10 까지의 합 = " + resultNum);

	// ------------------------------------------------------------
	// 전달인자와 리턴값 모두 있는 함수 정의
	
	
	
</script>
</head>
<body>

</body>
</html>











